<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
      #map-canvas {
        height: 500px;
        margin: 0px;
        padding: 0px
      }
    </style>
    <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/themes/smoothness/jquery-ui.css" />
    <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js"></script>
    <%="<script type='text/javascript'
      src='https://maps.googleapis.com/maps/api/js?key=#{ENV['GoogleMap']}&libraries=geometry'></script>".html_safe %>
  </head>

  <body data-env="<%= Rails.env %>">
  	<div class="col-xs-2" id="cart">
			<h4>CART</h4>
			<ul>
			</ul>
	  </div>
    <div class="col-xs-6" id="map-canvas">
    </div>
    <div class="col-xs-2" id="filter">
      <h4>SEARCH</h4>
      <form name="searchObject" action="/test">
        <%= label_tag "Pick up date:" %>
        <input id="pickupdate" type="text" readonly="readonly" />
        <%= label_tag "Return date:" %>
        <input id="returndate" type="text" readonly="readonly" />
        <%= label_tag "Type of item" %>
        <%= collection_select :category, :categorylist_id, Categorylist.all, :id, :name, include_blank: true %>
        <%= label_tag "Item" %>
        <%= collection_select :item, :itemlist_id_eq, Itemlist.select { |i| Inventory.all.pluck("itemlist_id").include? i.id }, :id, :name, include_blank: true %>
        <%= submit_tag "Find stuff for me!" %>        
      </form>
      <h4 id="logValue">Test</h4>
    </div>
  </body>
</html>

<script>
  
  var pickupdate_search;
  var returndate_search;
  var starting_db = gon.jbuilder;
  $("#pickupdate").datepicker({
      dateFormat: "dd-M-yy",
      minDate: 0,
      onSelect: function (date) {
          date1 = $('#pickupdate').datepicker('getDate');
          //sets minDate to pickupdate (i.e., date1)
          $('#returndate').datepicker('option', 'minDate', date1);
      }
  });

  $('#returndate').datepicker({
      dateFormat: "dd-M-yy",
      onSelect: function () {
        pickupdate_search = $('#pickupdate').datepicker('getDate');
        returndate_search = $('#returndate').datepicker('getDate');
        if (returndate_search <= pickupdate_search) {
            var minDate = $('#returndate').datepicker('option', 'minDate');
            $('#returndate').datepicker('setDate', minDate);
        }
      }
  });

  function DateDiff(date1, date2) {
    var datediff = date1.getTime() - date2.getTime();
    //store the getTime diff - or +
    return (datediff / (24 * 60 * 60 * 1000));
    //Convert values to -/+ days and return value
  }

  $("#logValue").on("click", LogValue);

  function LogValue() { 
    console.log(starting_db)
    // console.log(pickupdate_search)
    starting_db = jQuery.grep(starting_db, function(lender){
      var is_valid = true;

      inventories = lender.inventories;
      console.log(inventories)
      for(var i=0; i<inventories.length; i++){
        requests = inventories[i].requests;
        console.log(requests)
        for(var x=0; x<requests.length; x++){
          //first need to convert the 2014-09-12 strings in the JSON to date objects, note that when they convert, they take on PST, so also need to ensure they become UTC again. As long as everything is in UTC and I don't need to send out calendar invites in PST, it's fine. Else, I'll need to convert back to PST before sending any emails to the user on specific times
          var pickupdate_request = new Date(requests[x].pickupdate).getUTCDate();
          var returndate_request = new Date(requests[x].returndate).toUTCString();
          console.log(returndate_search.getTime())
          console.log(pickupdate_request.getTime())
          console.log(DateDiff(pickupdate_request,returndate_search))
          var test = DateDiff(pickupdate_request,returndate_search) * DateDiff(pickupdate_search - returndate_request)
          if(test > 0) {
            //full overlap
            is_valid = false;
            break;
          } else if(test === 0) {
            //edge overlap
            is_valid = true;
            break;
          } else if(test <0) {
            //no overlap at all
            is_valid = true
            break;
          }
          
        }
      }
      
      return is_valid;
    });
    initializeMap();
  }

  // google.maps.event.addListener(marker,'click',function() {
  // map.setZoom(9);
  // map.setCenter(marker.getPosition());
  // });

  var railsENV = $('body').data('env')
  if (railsENV=="development") {
    var optimizeIt = false
  } else {
    var optimizeIt = true
  }
  var map;
  function initializeMap() {
    var mapOptions = {
      zoom: 13,
      center: new google.maps.LatLng(gon.borrower.latitude, gon.borrower.longitude) 
    };
    map = new google.maps.Map(document.getElementById('map-canvas'),
        mapOptions);

    var markers = {};
    var infowindows = {};
    $.each( starting_db, function (counter, lender) { 
      var contentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        '<h1 id="firstHeading" class="firstHeading">'+ lender.email + '</h1>'+
        '<div id="bodyContent">'+
        '<ul>' +
        $.map( lender.inventories, function (inventory, counter) {
          if (inventory.description == null || inventory.description == "") {
            var description = ''
          } else {
            var description = ': ' + inventory.description
          };
          return '<li id="add_inventory" data-id="' + inventory.id + '" data-description="' + description + '" data-lender_email="' + lender.email + '" data-name="' + inventory.name + '">' + inventory.name + description + '</li>';
        }).join('') +
        '</ul>' +
        '</div>'+
        '</div>';
      markers[counter] = new google.maps.Marker({
        position: new google.maps.LatLng(lender.latitude, lender.longitude),
        map: map,
        title: 'lender_marker ' + lender.email,
        optimized: optimizeIt 
      });
      infowindows[counter] = new google.maps.InfoWindow({
        content: contentString
      });
      markers[counter].setMap(map);
      google.maps.event.addListener(markers[counter], 'click', function() {
        infowindows[counter].open(map,markers[counter]);
      });
    });
  };
  google.maps.event.addDomListener(window, 'load', initializeMap);

  populateCart(); // Populates the cart when page loads

  $(document).on("click", "#add_inventory", function() { 

    // Get current state of our items from session
    var items = JSON.parse(sessionStorage.getItem("cart"));
    if(items === null) // if cart is empty
        items = [];

    var id_to_add = $(this).data('id');
    var exist=$.grep(items, function(obj) { return obj.id == id_to_add; });
    if(exist.length===0) {
      //Build the item
      var item = {
        id: $(this).data('id'),
        name: $(this).data('name'),
        description: $(this).data('description'),
        lender_email: $(this).data('lender_email')
      };
      items.push(item); // Push item to the cart
      sessionStorage.setItem("cart", JSON.stringify(items)); // Save cart back to session
      addToCart(item); // append item to the cart
    }  
  });

  $(document).on('click', '#remove_inventory', function(){
      var itemIndex = $(this).parent().index(); // Get item index from the DOM
      $(this).remove(); // Remove it from the DOM
      var items = JSON.parse(sessionStorage.getItem("cart"));
      items.splice(itemIndex,1); // Remove item from the session by using the index
      sessionStorage.setItem("cart", JSON.stringify(items)); // Update
  });

  // $(document).on("click", "#remove_inventory", function() {

  //   // Get current state of our items from session
  //   var items = JSON.parse(sessionStorage.getItem("cart"));

  //   // Find the clicked item and remove it from items
  //   for (var i = 0; i < items.length; i++)
  //     if (items[i].id && items[i].id === $(this).data('id')) { 
  //         items.splice(i, 1);
  //         break;
  //     }

  //   sessionStorage.setItem("cart", JSON.stringify(items)); // Save cart back to session
  //   removeFromCart($(this).data('id')); // remove item from the cart
  // });

  // function removeFromCart(item_id){
  //   $('#cart > ul').find('li[id=' + item_id + ']').remove();
  // }

  function populateCart(){
    var items = JSON.parse(sessionStorage.getItem("cart"));
      if(items !== null){
         var cart = $('#cart > ul');
         for (i = 0; i < items.length; i++) {
           cart.append('<li id="remove_inventory" data-id="' + items[i]['id'] + '" data-description="' + items[i]['description'] + '" data-lender_email="' + items[i]['lender_email'] + '" data-name="' + items[i]['name'] + '">' + items[i]['name'] + items[i]['description'] + '</li>');
         }
      }
  }

  function addToCart(item){
    $('#cart > ul').append('<li id="remove_inventory" data-id="' + item['id'] + '" data-description="' + item['description'] + '" data-lender_email="' + item['lender_email'] + '" data-name="' + item['name'] + '">' + item['name'] + item['description'] + '</li>');
  }

</script>

<!-- <table class="table table-condensed table-hover">
    <thead>
      <tr>
        <th class="col-xs-2">Email</th>
      </tr>
    </thead>

    <tbody>
      <tr>
		<%# @lenders.each do |l| %>
		  <td><%#= "#{l.email}" %></td>
		<%# end %>
	  </tr>
	</tbody>
</table>  

<script>
</script>
 -->


